
i)
tcpdump command: sudo tcpdump host 34.193.77.105 -w ${file}.pcap

The code is approximately the same as `analysis_pcap_tcp.cpp`.
I add class question_3, and some functions to calculate:
number_of_flows, load_time, number_of_packets, and total_size.


1) Reassemble each unique HTTP Request/Response
[flow #44936280]
  REQUEST:  [1571105281.764030] 192.168.1.216:49860 -> 34.193.77.105:1080; SEQ:3126579748; ACK:4142151267; WND:  2058; PSH; ACK;
  RESPONSE: [1571105281.780777] 34.193.77.105:1080 -> 192.168.1.216:49860; SEQ:4142151267; ACK:3126580124; WND:   219; PSH; ACK;

[flow #44935808]
  REQUEST:  [1571105280.828264] 192.168.1.216:49859 -> 34.193.77.105:1080; SEQ:3041783942; ACK:1075739853; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.849851] 34.193.77.105:1080 -> 192.168.1.216:49859; SEQ:1075739853; ACK:3041784367; WND:   219; ACK;

[flow #44935336]
  REQUEST:  [1571105280.806526] 192.168.1.216:49858 -> 34.193.77.105:1080; SEQ: 332783377; ACK:1128786804; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.824476] 34.193.77.105:1080 -> 192.168.1.216:49858; SEQ:1128786804; ACK: 332783802; WND:   219; ACK;

[flow #44934864]
  REQUEST:  [1571105280.806413] 192.168.1.216:49857 -> 34.193.77.105:1080; SEQ:1774594574; ACK:3298155929; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.830299] 34.193.77.105:1080 -> 192.168.1.216:49857; SEQ:3298155929; ACK:1774595002; WND:   219; ACK;

[flow #44934392]
  REQUEST:  [1571105280.786582] 192.168.1.216:49856 -> 34.193.77.105:1080; SEQ:4183841999; ACK:3267836771; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.806241] 34.193.77.105:1080 -> 192.168.1.216:49856; SEQ:3267836771; ACK:4183842429; WND:   219; ACK;

[flow #44933920]
  REQUEST:  [1571105280.768236] 192.168.1.216:49855 -> 34.193.77.105:1080; SEQ: 183027301; ACK:2848665453; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.787959] 34.193.77.105:1080 -> 192.168.1.216:49855; SEQ:2848665453; ACK: 183027730; WND:   219; ACK;

[flow #44933448]
  REQUEST:  [1571105280.754505] 192.168.1.216:49854 -> 34.193.77.105:1080; SEQ: 715860559; ACK: 602354300; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.774160] 34.193.77.105:1080 -> 192.168.1.216:49854; SEQ: 602354300; ACK: 715860987; WND:   219; ACK;

[flow #44930144]
  REQUEST:  [1571105280.638216] 192.168.1.216:49847 -> 34.193.77.105:1080; SEQ:2611551716; ACK:1948253176; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.656928] 34.193.77.105:1080 -> 192.168.1.216:49847; SEQ:1948253176; ACK:2611552141; WND:   219; ACK;

[flow #44929672]
  REQUEST:  [1571105280.638273] 192.168.1.216:49846 -> 34.193.77.105:1080; SEQ:3379215911; ACK:1293531874; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.657199] 34.193.77.105:1080 -> 192.168.1.216:49846; SEQ:1293531874; ACK:3379216336; WND:   219; ACK;

[flow #44929200]
  REQUEST:  [1571105280.638355] 192.168.1.216:49845 -> 34.193.77.105:1080; SEQ:1162782582; ACK:3647527778; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.657092] 34.193.77.105:1080 -> 192.168.1.216:49845; SEQ:3647527778; ACK:1162783006; WND:   219; ACK;

[flow #44928256]
  REQUEST:  [1571105279.866349] 192.168.1.216:49843 -> 34.193.77.105:1080; SEQ: 826041406; ACK:1081950365; WND:  2058; PSH; ACK;
  RESPONSE: [1571105279.884032] 34.193.77.105:1080 -> 192.168.1.216:49843; SEQ:1081950365; ACK: 826041850; WND:   219; PSH; ACK;

[flow #44928728]
  REQUEST:  [1571105280.638531] 192.168.1.216:49844 -> 34.193.77.105:1080; SEQ:1000583392; ACK: 535087477; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.656916] 34.193.77.105:1080 -> 192.168.1.216:49844; SEQ: 535087477; ACK:1000583802; WND:   219; PSH; ACK;

[flow #44930616]
  REQUEST:  [1571105280.638143] 192.168.1.216:49848 -> 34.193.77.105:1080; SEQ:3283242409; ACK:2583781527; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.658015] 34.193.77.105:1080 -> 192.168.1.216:49848; SEQ:2583781527; ACK:3283242838; WND:   219; ACK;

[flow #44931088]
  REQUEST:  [1571105280.637964] 192.168.1.216:49849 -> 34.193.77.105:1080; SEQ:1709103290; ACK: 588868312; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.655728] 34.193.77.105:1080 -> 192.168.1.216:49849; SEQ: 588868312; ACK:1709103725; WND:   219; ACK;

[flow #44931560]
  REQUEST:  [1571105280.683274] 192.168.1.216:49850 -> 34.193.77.105:1080; SEQ:2428172366; ACK:2808690897; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.703347] 34.193.77.105:1080 -> 192.168.1.216:49850; SEQ:2808690897; ACK:2428172799; WND:   219; ACK;

[flow #44932032]
  REQUEST:  [1571105280.683603] 192.168.1.216:49851 -> 34.193.77.105:1080; SEQ:1293477429; ACK:1560434153; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.704171] 34.193.77.105:1080 -> 192.168.1.216:49851; SEQ:1560434153; ACK:1293477859; WND:   219; ACK;

[flow #44932504]
  REQUEST:  [1571105280.702835] 192.168.1.216:49852 -> 34.193.77.105:1080; SEQ:2457279974; ACK:2874083960; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.720607] 34.193.77.105:1080 -> 192.168.1.216:49852; SEQ:2874083960; ACK:2457280402; WND:   219; ACK;

[flow #44932976]
  REQUEST:  [1571105280.724264] 192.168.1.216:49853 -> 34.193.77.105:1080; SEQ:2660308500; ACK: 158933353; WND:  2058; PSH; ACK;
  RESPONSE: [1571105280.744121] 34.193.77.105:1080 -> 192.168.1.216:49853; SEQ: 158933353; ACK:2660308930; WND:   219; ACK;

2)
  http_1080.pcap: 18 flows
  tcp_1081.pcap:  6 flows  => HTTP/1.1
  tcp_1082.pcap:  1 flows  => HTTP/2.0

  From counting numbers of flows, we can know that tcp_1081.pcap is HTTP/1.1,
  because it has 6 TCP flows. And tcp_1082.pcap is HTTP/2.0, because it only
  has 1 TCP flow. The code logic is very simple. First create hash function on
  tcp_packet: analysis_pcap_http.cpp#L196-L201
    auto packet_hash(tcp_packet const& pkt) -> std::size_t
    {
        return (0xFFFF & pkt.ip_datagram_.src_) * pkt.tcp_segment_.src_port_ +
               (0xFFFF & pkt.ip_datagram_.dst_) * pkt.tcp_segment_.dst_port_ ;
    }
  Next, loop through all packets and push them into hash_table. This hash_table
  can saperate different TCP flows. Finally, count how many entries are there in
  the table.

3)
| File           | HTTP | load time | packets | total size (bytes) |
|----------------+------+-----------+---------+--------------------|
| http_1080.pcap |  1.0 | 1860 ms   |    2467 |            2309704 |
| tcp_1081.pcap  |  1.1 | 2101 ms   |    2378 |            2314129 |
| tcp_1082.pcap  |  2.0 | 1109 ms   |    2088 |            2308855 |

Observations:
  1) Fastest: HTTP/2.0, Slowest: HTTP/1.1. I think this is because
     single connection helps building up speed and reduce packets.
     Even though the total transfer size are very similar.
  2) Most sent raw packet: HTTP/1.0. Least: HTTP/2.0
     This is because HTTP/1.0 need
     to establish TCP connection for every object. The tcp handshakes
     and FIN packet makes HTTP/1.0 bigger. HTTP/2.0 reduce all these
     overhead thus make total packet smaller.
